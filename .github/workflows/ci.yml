name: CI

on:
  push:
    branches: [main]
    tags-ignore:
      - 'v*.*.*'
  pull_request:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
      - run: corepack enable
      - run: corepack prepare yarn@4.9.1 --activate
      - run: yarn install --immutable
      - run: yarn lint

  test:
    needs: lint
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        node-version: [20.x, 22.x]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'
      - run: corepack enable
      - run: corepack prepare yarn@4.9.1 --activate
      - if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
      - if: runner.os == 'Windows'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: |
            build\Release
            build\Debug
            build\default
            out\Release
            out\Debug
            Release
            Debug
            addon-build\release\install-root
            addon-build\debug\install-root
            addon-build\default\install-root
            build\lib\binding
            lib\binding
          key: ${{ runner.os }}-${{ matrix.node-version }}-${{ hashFiles('src/native/**', 'binding.gyp') }}
      - run: yarn install --immutable
      - run: yarn build --verbose
      - name: verify addon (windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Search for the native module in all possible locations
          $searchPaths = @(
            "build\Release",
            "build\Debug",
            "build",
            "build\default",
            "out\Release",
            "out\Debug",
            "Release",
            "Debug",
            "addon-build\release\install-root",
            "addon-build\debug\install-root",
            "addon-build\default\install-root",
            "lib\binding",
            "build\lib\binding"
          )

          # Find all node_darts.node files
          $files = Get-ChildItem -Recurse -Filter node_darts.node -Path $searchPaths -ErrorAction SilentlyContinue

          # Display all found files
          if ($files.Count -gt 0) {
            Write-Host "Found $($files.Count) native module(s):"
            foreach ($file in $files) {
              Write-Host "  - $($file.FullName)"
            }

            # Copy the first found module to all search paths to ensure it's found during tests
            $sourceFile = $files[0].FullName
            Write-Host "Using $sourceFile as the source file for copying"

            foreach ($path in $searchPaths) {
              if (!(Test-Path $path)) {
                New-Item -ItemType Directory -Path $path -Force | Out-Null
              }
              $targetFile = Join-Path $path "node_darts.node"
              if (!(Test-Path $targetFile)) {
                Write-Host "Copying to $targetFile"
                Copy-Item -Path $sourceFile -Destination $targetFile -Force
              }
            }

            # Also copy to node-version specific paths
            $nodeVersion = node -p "process.versions.modules"
            $platform = node -p "process.platform"
            $arch = node -p "process.arch"

            $versionSpecificPath = "lib\binding\node-v$nodeVersion-$platform-$arch"
            if (!(Test-Path $versionSpecificPath)) {
              New-Item -ItemType Directory -Path $versionSpecificPath -Force | Out-Null
            }
            $targetFile = Join-Path $versionSpecificPath "node_darts.node"
            Write-Host "Copying to version-specific path: $targetFile"
            Copy-Item -Path $sourceFile -Destination $targetFile -Force

            exit 0
          } else {
            Write-Error "No node_darts.node files found in any of the search paths"
            exit 1
          }
      - name: Run tests with coverage
        run: yarn test:coverage
        env:
          JEST_WORKERS: 4
      - uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  test-windows:
    needs: lint
    runs-on: windows-latest
    strategy:
      matrix:
        node-version: [20.x, 22.x]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'
      - run: corepack enable
      - run: corepack prepare yarn@4.9.1 --activate
      - uses: ilammy/msvc-dev-cmd@v1
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - uses: actions/cache@v4
        with:
          path: |
            build\Release
            build\Debug
            build\default
            out\Release
            out\Debug
            Release
            Debug
            addon-build\release\install-root
            addon-build\debug\install-root
            addon-build\default\install-root
            build\lib\binding
            lib\binding
          key: ${{ runner.os }}-${{ matrix.node-version }}-${{ hashFiles('src/native/**', 'binding.gyp') }}
      - run: yarn install --immutable
      - run: yarn build --verbose
      - name: verify addon (windows)
        shell: pwsh
        run: |
          # Search for the native module in all possible locations
          $searchPaths = @(
            "build\Release",
            "build\Debug",
            "build",
            "build\default",
            "out\Release",
            "out\Debug",
            "Release",
            "Debug",
            "addon-build\release\install-root",
            "addon-build\debug\install-root",
            "addon-build\default\install-root",
            "lib\binding",
            "build\lib\binding"
          )

          # Find all node_darts.node files
          $files = Get-ChildItem -Recurse -Filter node_darts.node -Path $searchPaths -ErrorAction SilentlyContinue

          # Display all found files
          if ($files.Count -gt 0) {
            Write-Host "Found $($files.Count) native module(s):"
            foreach ($file in $files) {
              Write-Host "  - $($file.FullName)"
            }

            # Copy the first found module to all search paths to ensure it's found during tests
            $sourceFile = $files[0].FullName
            Write-Host "Using $sourceFile as the source file for copying"

            foreach ($path in $searchPaths) {
              if (!(Test-Path $path)) {
                New-Item -ItemType Directory -Path $path -Force | Out-Null
              }
              $targetFile = Join-Path $path "node_darts.node"
              if (!(Test-Path $targetFile)) {
                Write-Host "Copying to $targetFile"
                Copy-Item -Path $sourceFile -Destination $targetFile -Force
              }
            }

            # Also copy to node-version specific paths
            $nodeVersion = node -p "process.versions.modules"
            $platform = node -p "process.platform"
            $arch = node -p "process.arch"

            $versionSpecificPath = "lib\binding\node-v$nodeVersion-$platform-$arch"
            if (!(Test-Path $versionSpecificPath)) {
              New-Item -ItemType Directory -Path $versionSpecificPath -Force | Out-Null
            }
            $targetFile = Join-Path $versionSpecificPath "node_darts.node"
            Write-Host "Copying to version-specific path: $targetFile"
            Copy-Item -Path $sourceFile -Destination $targetFile -Force

            exit 0
          } else {
            Write-Error "No node_darts.node files found in any of the search paths"
            exit 1
          }
      - name: Run tests with coverage
        run: yarn test:coverage
        env:
          JEST_WORKERS: 2
